terra/
├── provider.tf
└── ec2.tf


1. provider
What This Means:
provider "aws":
This tells Terraform you're using AWS as your cloud provider.

region = "ap-south-2":
Specifies the AWS region where Terraform will create resources.
In this case, it's Asia Pacific (Hyderabad) (ap-south-2).

provider "aws" {
  region  = "ap-south-2"
  profile -"default"
}


2.Ec2
resource "aws_instance" "instance1" {
  ami           ="ami-0e386fa0b67b8b12c"
  instance_type = "t3.micro"
}
Breakdown:
* resource "aws_instance" "instance1":
   This tells Terraform to create an EC2 instance in AWS.
   "aws_instance" → the type of resource (EC2 instance).
   "instance1" → the name/label you assign within Terraform.

* ami = "ami-0e386fa0b67b8b12c":
   Specifies the AMI ID (Amazon Machine Image) to use for the instance.
   This ID determines the OS and base configuration (e.g., Amazon Linux, Ubuntu).
   The AMI must be valid for the region set in the provider block.

* instance_type = "t3.micro":
   Sets the type of EC2 instance (CPU, memory, etc.).
   t3.micro is a low-cost, general-purpose instance, good for light workloads.




===>  After terraform init you will get like this:

root@ip-172-31-14-52:/home/ubuntu/terra# terraform init
Initializing the backend...
Initializing provider plugins...
- Finding latest version of hashicorp/aws...
- Installing hashicorp/aws v5.99.1...
- Installed hashicorp/aws v5.99.1 (signed by HashiCorp)
Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.



===> terraform plugin convert your code into API
/home/ubuntu/terra/.terraform/providers/registry.terraform.io/hashicorp/aws


===> terraform validate: 
root@ip-172-31-14-52:/home/ubuntu/terra# terrform validate
Command 'terrform' not found, did you mean:
  command 'terraform' from snap terraform (1.12.1)
See 'snap info <snapname>' for additional versions.
root@ip-172-31-14-52:/home/ubuntu/terra# terraform validate
Success! The configuration is valid.


===> terraform plan :
root@ip-172-31-14-52:/home/ubuntu/terra# terraform plan

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.instance1 will be created
  + resource "aws_instance" "instance1" {
      + ami                                  = "ami-0e386fa0b67b8b12c"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + enable_primary_ipv6                  = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t3.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = (known after apply)
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags_all                             = (known after apply)
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification (known after apply)

      + cpu_options (known after apply)

      + ebs_block_device (known after apply)

      + enclave_options (known after apply)

      + ephemeral_block_device (known after apply)

      + instance_market_options (known after apply)

      + maintenance_options (known after apply)

      + metadata_options (known after apply)

      + network_interface (known after apply)

      + private_dns_name_options (known after apply)

      + root_block_device (known after apply)
    }

====> after running terraform apply the output is like this
aws_instance.instance1: Creating...
aws_instance.instance1: Still creating... [00m10s elapsed]
aws_instance.instance1: Creation complete after 13s [id=i-0595f9c32521d6dff]

* To connect this machine, you must modify the inbound rules to permit SSH port 22 in the default security group.
